"""
\d      可以匹配一个数字
\w      可以匹配一个字母或数字
\s      可以匹配一个空格（也包括tab等空白符）
.       可以匹配任意一个字符
*       表示任意个字符（包括0个）
+       表示至少一个字符
？      表示0个或一个字符
{n}     表示n个字符
{n,m}   表示n-m个字符
"""
#####example
#\d{3}\s+\d{3,8}
#从左到右，匹配3个数字，至少一个空白符，3-8个数字
#eg:"101  23456"
import re

"""
[0-9a-zA-Z\_]         表示范围(可以匹配一个数字、字母或者下划线)
A|B                   可以匹配A或者B
^                     表示 行开头：^\d -->必须以数字开头
$                     表示结束：\d$ -->必须以数字结尾


"""
####python 的字符串前面加一个r代表字符串中不需要转义字符
s="ABC\\_001"   #双斜杠被转义成单斜杠
print(s)
s = r"ABC\\_001" #双斜杠正常输出
print(s)

"""========python 中re模块包含了所有正则表达式的功能============"""
##########################################匹配
#re.match(r"正则表达式",字符串)
#如果匹配返回一个match对象，否则返回None

s = "123_4567"
print(re.match(r'^\d{3}\_\d{3,8}$',s))

###########################################用于split()切分字符串
s = 'a,b  ,c ,d   , r'
print(s.split(","))  #无法识别连续的空格
#结果：['a', 'b  ', 'c ', 'd   ', ' r']
s = 'a,b  ,c ,d   , r'
print(re.split(r"[\s\,]+",s)) #正则表达式匹配空格和逗号（至少一个）

##############################################用于分组
#注意用()可以进行分组
s = "010-1234"
matchE = re.match(r"^(\d{3})-(\d+$)",s)

print(matchE.group(0))
print(matchE.group(1))
print(matchE.group(2))
